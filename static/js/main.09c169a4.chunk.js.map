{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","calendarComponentRef","React","createRef","state","calendarWeekends","calendarEvents","title","start","Date","toggleWeekends","setState","gotoPast","current","getApi","gotoDate","handleDateClick","arg","window","confirm","dateStr","concat","date","allDay","className","onClick","this","defaultView","header","left","center","right","plugins","dayGridPlugin","timeGridPlugin","interactionPlugin","ref","weekends","events","dateClick","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+SAaqBA,G,oOACnBC,qBAAuBC,IAAMC,Y,EAE7BC,MAAQ,CACNC,kBAAkB,EAClBC,eAAgB,CAEd,CAAEC,MAAO,YAAaC,MAAO,IAAIC,Q,EA+BrCC,eAAiB,WACf,EAAKC,SAAS,CAEZN,kBAAmB,EAAKD,MAAMC,oB,EAIlCO,SAAW,WACS,EAAKX,qBAAqBY,QAAQC,SACxCC,SAAS,e,EAGvBC,gBAAkB,SAAAC,GACZC,OAAOC,QAAQ,qCAAuCF,EAAIG,QAAU,OACtE,EAAKT,SAAS,CAEZL,eAAgB,EAAKF,MAAME,eAAee,OAAO,CAE/Cd,MAAO,YACPC,MAAOS,EAAIK,KACXC,OAAQN,EAAIM,Y,uDA9ClB,OACE,yBAAKC,UAAU,gBACb,yBAAKA,UAAU,oBACb,4BAAQC,QAASC,KAAKhB,gBAAtB,mBADF,OAEE,4BAAQe,QAASC,KAAKd,UAAtB,4BAFF,kDAKA,yBAAKY,UAAU,yBACb,kBAAC,IAAD,CACEG,YAAY,eACZC,OAAQ,CACNC,KAAM,kBACNC,OAAQ,QACRC,MAAO,kDAETC,QAAS,CAACC,IAAeC,IAAgBC,KACzCC,IAAKV,KAAKzB,qBACVoC,SAAUX,KAAKtB,MAAMC,iBACrBiC,OAAQZ,KAAKtB,MAAME,eACnBiC,UAAWb,KAAKV,wB,GA/BKd,IAAMsC,YCDnBC,QACW,cAA7BvB,OAAOwB,SAASC,UAEe,UAA7BzB,OAAOwB,SAASC,UAEhBzB,OAAOwB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.09c169a4.chunk.js","sourcesContent":["import React from \"react\";\nimport FullCalendar from \"@fullcalendar/react\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\nimport interactionPlugin from \"@fullcalendar/interaction\"; // needed for dayClick\n\nimport \"./App.css\";\n\n// must manually import the stylesheets for each plugin\nimport \"@fullcalendar/core/main.css\";\nimport \"@fullcalendar/daygrid/main.css\";\nimport \"@fullcalendar/timegrid/main.css\";\n\nexport default class App extends React.Component {\n  calendarComponentRef = React.createRef();\n\n  state = {\n    calendarWeekends: true,\n    calendarEvents: [\n      // initial event data\n      { title: \"Event Now\", start: new Date() }\n    ]\n  };\n\n  render() {\n    return (\n      <div className=\"calendar-app\">\n        <div className=\"calendar-app-top\">\n          <button onClick={this.toggleWeekends}>toggle weekends</button>&nbsp;\n          <button onClick={this.gotoPast}>go to a date in the past</button>\n          &nbsp; (also, click a date/time to add an event)\n        </div>\n        <div className=\"calendar-app-calendar\">\n          <FullCalendar\n            defaultView=\"dayGridMonth\"\n            header={{\n              left: \"prev,next today\",\n              center: \"title\",\n              right: \"dayGridMonth,timeGridWeek,timeGridDay,listWeek\"\n            }}\n            plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\n            ref={this.calendarComponentRef}\n            weekends={this.state.calendarWeekends}\n            events={this.state.calendarEvents}\n            dateClick={this.handleDateClick}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  toggleWeekends = () => {\n    this.setState({\n      // update a property\n      calendarWeekends: !this.state.calendarWeekends\n    });\n  };\n\n  gotoPast = () => {\n    let calendarApi = this.calendarComponentRef.current.getApi();\n    calendarApi.gotoDate(\"2000-01-01\"); // call a method on the Calendar object\n  };\n\n  handleDateClick = arg => {\n    if (window.confirm(\"Would you like to add an event to \" + arg.dateStr + \" ?\")) {\n      this.setState({\n        // add new event data\n        calendarEvents: this.state.calendarEvents.concat({\n          // creates a new array\n          title: \"New Event\",\n          start: arg.date,\n          allDay: arg.allDay\n        })\n      });\n    }\n  };\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}